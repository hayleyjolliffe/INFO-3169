-- HAYLEY JOLLIFFE
-- Week 12

USE northwind_w12;

-- Step 01
CREATE TABLE IF NOT EXISTS log_shippers (
    RecordID INT AUTO_INCREMENT PRIMARY KEY,
    CompanyName VARCHAR(50) NOT NULL,
    Phone VARCHAR(50) NOT NULL,
    UpdateDate DATETIME DEFAULT NULL,
    ActionType VARCHAR(50) DEFAULT NULL
);

DROP TRIGGER IF EXISTS monitor_shippers;

CREATE TRIGGER monitor_shippers
AFTER UPDATE
ON Shippers FOR EACH ROW
INSERT INTO monitor_shippers
SET ActionType = 'Update',
CompanyName = NEW.CompanyName,
Phone = NEW.Phone,
UpdateDate = NOW();



-- Step 02
DROP TRIGGER IF EXISTS northwind_w12.update_shippers;

-- Set log table
CREATE TABLE IF NOT EXISTS log_update_shippers (
    CompanyName VARCHAR(40) NOT NULL,
    Phone VARCHAR(24) DEFAULT NULL
);

DELIMITER $$

-- Start trigger
CREATE TRIGGER update_shippers
AFTER UPDATE
ON Shippers FOR EACH ROW
BEGIN
IF NEW.CompanyName <=> OLD.CompanyName
THEN
INSERT INTO log_update_shippers(CompanyName, Phone)
VALUES (NEW.CompanyName, NEW.Phone);
END IF;

END $$

DELIMITER ;



-- Step 03
DROP TRIGGER IF EXISTS northwind_w12.update_orders;

-- Set log table
CREATE TABLE IF NOT EXISTS log_update_orders (
    OrderID INT NOT NULL,
    Total INT NOT NULL,
    OrderTime VARCHAR(40),
    ActionType VARCHAR(40)
);

DELIMITER $$

-- Start trigger
CREATE TRIGGER update_orders
AFTER INSERT
ON OrderDetails FOR EACH ROW
BEGIN
IF NEW.Quantity * NEW.UnitPrice > 5000
THEN
INSERT INTO log_update_orders(OrderID, Total, OrderTime, ActionType)
VALUES (NEW.OrderID, (NEW.Quantity * NEW.UnitPrice), NOW(), 'Update');
END IF;

END $$

DELIMITER ;



-- Step 04
DROP TRIGGER IF EXISTS northwind_w12.order_error;

DELIMITER $$

-- No table, start trigger
CREATE TRIGGER order_error
AFTER INSERT
ON OrderDetails FOR EACH ROW
BEGIN
DECLARE MESSAGE_TEXT VARCHAR(60);
IF ((NEW.Quantity IS NULL) OR (NEW.UnitPrice IS NULL))
THEN
SIGNAL SQLSTATE '45000';
SET MESSAGE_TEXT = "Error: Quantity multiplied by unit price should not be null.";
ELSE
INSERT INTO log_update_orders(OrderID, Total, OrderTime, ActionType)
VALUES (NEW.OrderId, (NEW.Quantity * NEW.UnitPrice), NOW(), 'Update');
END IF;

END $$

DELIMITER ;



-- Step 05
DROP TRIGGER IF EXISTS northwind_w12.monitor_deletion;

-- Set log table
CREATE TABLE IF NOT EXISTS log_monitor_deletion (
    OrderID INT NOT NULL,
    UpdateDate TIME,
    ActionType VARCHAR(40)
);

DELIMITER $$

-- Start trigger
CREATE TRIGGER monitor_deletion
AFTER DELETE
ON Orders FOR EACH ROW
BEGIN
DECLARE MESSAGE_TEXT VARCHAR(60);
IF OLD.OrderID IS NOT NULL
THEN
INSERT INTO log_monitor_deletion(OrderID, UpdateDate, ActionType)
VALUES (OLD.OrderID, NOW(), 'Delete');
SET MESSAGE_TEXT = CONCAT('Order Number: ', CONVERT(OLD.OrderID, CHAR), ' was deleted from the Orders table.');
END IF;

END $$

DELIMITER ;
